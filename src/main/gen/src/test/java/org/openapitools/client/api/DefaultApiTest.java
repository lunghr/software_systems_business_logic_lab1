/*
 * Cart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductDto;
import org.openapitools.client.model.UserDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create new card
     *
     * Creates a new card with the specified details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bankAccountNumberCreateCardPostTest() throws ApiException {
        String accountNumber = null;
        api.bankAccountNumberCreateCardPost(accountNumber);
        // TODO: test validations
    }

    /**
     * Creates a bank account
     *
     * Creates a new bank account with the specified details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bankCreateBankAccountPostTest() throws ApiException {
        api.bankCreateBankAccountPost();
        // TODO: test validations
    }

    /**
     * Process a payment transaction
     *
     * Processes a payment transaction using the provided details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bankProcessTransactionTransactionAmountPostTest() throws ApiException {
        Double transactionAmount = null;
        Object body = null;
        api.bankProcessTransactionTransactionAmountPost(transactionAmount, body);
        // TODO: test validations
    }

    /**
     * Top up account balance
     *
     * Tops up the balance of the specified bank account by card number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bankTopUpCardNumberAmountPostTest() throws ApiException {
        String cardNumber = null;
        Double amount = null;
        api.bankTopUpCardNumberAmountPost(cardNumber, amount);
        // TODO: test validations
    }

    /**
     * Method to validate card data
     *
     * Validates the card data provided by the user from the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bankValidateCardNumberCvvPostTest() throws ApiException {
        String cardNumber = null;
        String cvv = null;
        String body = null;
        api.bankValidateCardNumberCvvPost(cardNumber, cvv, body);
        // TODO: test validations
    }

    /**
     * Add product to cart
     *
     * Adds product to cart by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartAddCartIdProductIdPostTest() throws ApiException {
        String cartId = null;
        String productId = null;
        api.cartAddCartIdProductIdPost(cartId, productId);
        // TODO: test validations
    }

    /**
     * Decrements product in cart
     *
     * Decrements product in cart by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartDecrementCartIdProductIdPatchTest() throws ApiException {
        String cartId = null;
        String productId = null;
        api.cartDecrementCartIdProductIdPatch(cartId, productId);
        // TODO: test validations
    }

    /**
     * Delete product from cart
     *
     * Deletes product from cart by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartDeleteCartIdProductIdDeleteTest() throws ApiException {
        String cartId = null;
        String productId = null;
        api.cartDeleteCartIdProductIdDelete(cartId, productId);
        // TODO: test validations
    }

    /**
     * Increments product in cart
     *
     * Increments product in cart by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartIncrementCartIdProductIdPatchTest() throws ApiException {
        String cartId = null;
        String productId = null;
        api.cartIncrementCartIdProductIdPatch(cartId, productId);
        // TODO: test validations
    }

    /**
     * Get products in category
     *
     * Returns all products in the specified category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetCategoryNameProductsGetTest() throws ApiException {
        String categoryName = null;
        api.catalogGetCategoryNameProductsGet(categoryName);
        // TODO: test validations
    }

    /**
     * Create a new category
     *
     * Creates a new category if it does not already exist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryCreateCategoryNamePostTest() throws ApiException {
        String categoryName = null;
        api.categoryCreateCategoryNamePost(categoryName);
        // TODO: test validations
    }

    /**
     * Create a new child category
     *
     * Creates a new child category under the specified parent category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryCreateParentCategoryNameChildCategoryNamePostTest() throws ApiException {
        String parentCategoryName = null;
        String childCategoryName = null;
        api.categoryCreateParentCategoryNameChildCategoryNamePost(parentCategoryName, childCategoryName);
        // TODO: test validations
    }

    /**
     * Get all child categories of a category
     *
     * Returns all child categories of the specified category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryGetCategoryNameGetTest() throws ApiException {
        String categoryName = null;
        api.categoryGetCategoryNameGet(categoryName);
        // TODO: test validations
    }

    /**
     * Get all parents categories
     *
     * Returns a list of all parents categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryGetGetTest() throws ApiException {
        api.categoryGetGet();
        // TODO: test validations
    }

    /**
     * Get cart by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCartTest() throws ApiException {
        String cartId = null;
        api.getCart(cartId);
        // TODO: test validations
    }

    /**
     * Create order
     *
     * Creates order by cart id with chosen products from cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderCreateCartIdPostTest() throws ApiException {
        String cartId = null;
        List<String> requestBody = null;
        api.orderCreateCartIdPost(cartId, requestBody);
        // TODO: test validations
    }

    /**
     * Add a new payment method
     *
     * Adds a payment method (e.g. card) for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentAddUserIdPostTest() throws ApiException {
        String userId = null;
        String paymentType = null;
        String cardNumber = null;
        String expirationDate = null;
        String cvv = null;
        api.paymentAddUserIdPost(userId, paymentType, cardNumber, expirationDate, cvv);
        // TODO: test validations
    }

    /**
     * Get all available user payment methods
     *
     * Retrieves all payment methods for a specific user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentGetAllUserIdGetTest() throws ApiException {
        String userId = null;
        api.paymentGetAllUserIdGet(userId);
        // TODO: test validations
    }

    /**
     * Create a new product
     *
     * Creates a new product with the given details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCreatePostTest() throws ApiException {
        ProductDto productDto = null;
        api.productCreatePost(productDto);
        // TODO: test validations
    }

    /**
     * Change product stock quantity
     *
     * Changes the stock quantity of a product by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productQuantityProductIdChangeQuantityPostTest() throws ApiException {
        String productId = null;
        Integer quantity = null;
        String body = null;
        api.productQuantityProductIdChangeQuantityPost(productId, quantity, body);
        // TODO: test validations
    }

    /**
     * Reduce product stock quantity
     *
     * Reduces the stock quantity of a product by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productQuantityProductIdReduceQuantityPostTest() throws ApiException {
        String productId = null;
        Integer quantity = null;
        String body = null;
        api.productQuantityProductIdReduceQuantityPost(productId, quantity, body);
        // TODO: test validations
    }

    /**
     * Process a payment transaction
     *
     * Processes a payment transaction using the provided details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionProcessOrderIdPaymentMethodIdPostTest() throws ApiException {
        String orderId = null;
        String paymentMethodId = null;
        api.transactionProcessOrderIdPaymentMethodIdPost(orderId, paymentMethodId);
        // TODO: test validations
    }

    /**
     * Create a new user
     *
     * Creates a new user with the given details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCreatePostTest() throws ApiException {
        UserDto userDto = null;
        api.userCreatePost(userDto);
        // TODO: test validations
    }

}
