/*
 * Cart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProductDto;
import org.openapitools.client.model.UserDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bankAccountNumberCreateCardPost
     * @param accountNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created in account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankAccountNumberCreateCardPostCall(String accountNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bank/{accountNumber}/create/card"
            .replace("{" + "accountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankAccountNumberCreateCardPostValidateBeforeCall(String accountNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling bankAccountNumberCreateCardPost(Async)");
        }

        return bankAccountNumberCreateCardPostCall(accountNumber, _callback);

    }

    /**
     * Create new card
     * Creates a new card with the specified details
     * @param accountNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created in account </td><td>  -  </td></tr>
     </table>
     */
    public void bankAccountNumberCreateCardPost(String accountNumber) throws ApiException {
        bankAccountNumberCreateCardPostWithHttpInfo(accountNumber);
    }

    /**
     * Create new card
     * Creates a new card with the specified details
     * @param accountNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created in account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bankAccountNumberCreateCardPostWithHttpInfo(String accountNumber) throws ApiException {
        okhttp3.Call localVarCall = bankAccountNumberCreateCardPostValidateBeforeCall(accountNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create new card (asynchronously)
     * Creates a new card with the specified details
     * @param accountNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created in account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankAccountNumberCreateCardPostAsync(String accountNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankAccountNumberCreateCardPostValidateBeforeCall(accountNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankCreateBankAccountPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankCreateBankAccountPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bank/create/bank-account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankCreateBankAccountPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bankCreateBankAccountPostCall(_callback);

    }

    /**
     * Creates a bank account
     * Creates a new bank account with the specified details
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account created </td><td>  -  </td></tr>
     </table>
     */
    public void bankCreateBankAccountPost() throws ApiException {
        bankCreateBankAccountPostWithHttpInfo();
    }

    /**
     * Creates a bank account
     * Creates a new bank account with the specified details
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bankCreateBankAccountPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bankCreateBankAccountPostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a bank account (asynchronously)
     * Creates a new bank account with the specified details
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankCreateBankAccountPostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankCreateBankAccountPostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankProcessTransactionTransactionAmountPost
     * @param transactionAmount  (required)
     * @param body Card data for the transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankProcessTransactionTransactionAmountPostCall(Double transactionAmount, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/bank/process-transaction/{transactionAmount}"
            .replace("{" + "transactionAmount" + "}", localVarApiClient.escapeString(transactionAmount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankProcessTransactionTransactionAmountPostValidateBeforeCall(Double transactionAmount, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionAmount' is set
        if (transactionAmount == null) {
            throw new ApiException("Missing the required parameter 'transactionAmount' when calling bankProcessTransactionTransactionAmountPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bankProcessTransactionTransactionAmountPost(Async)");
        }

        return bankProcessTransactionTransactionAmountPostCall(transactionAmount, body, _callback);

    }

    /**
     * Process a payment transaction
     * Processes a payment transaction using the provided details
     * @param transactionAmount  (required)
     * @param body Card data for the transaction (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public void bankProcessTransactionTransactionAmountPost(Double transactionAmount, Object body) throws ApiException {
        bankProcessTransactionTransactionAmountPostWithHttpInfo(transactionAmount, body);
    }

    /**
     * Process a payment transaction
     * Processes a payment transaction using the provided details
     * @param transactionAmount  (required)
     * @param body Card data for the transaction (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bankProcessTransactionTransactionAmountPostWithHttpInfo(Double transactionAmount, Object body) throws ApiException {
        okhttp3.Call localVarCall = bankProcessTransactionTransactionAmountPostValidateBeforeCall(transactionAmount, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Process a payment transaction (asynchronously)
     * Processes a payment transaction using the provided details
     * @param transactionAmount  (required)
     * @param body Card data for the transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankProcessTransactionTransactionAmountPostAsync(Double transactionAmount, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankProcessTransactionTransactionAmountPostValidateBeforeCall(transactionAmount, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTopUpCardNumberAmountPost
     * @param cardNumber  (required)
     * @param amount  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account topped up </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankTopUpCardNumberAmountPostCall(String cardNumber, Double amount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bank/top-up/{cardNumber}/{amount}"
            .replace("{" + "cardNumber" + "}", localVarApiClient.escapeString(cardNumber.toString()))
            .replace("{" + "amount" + "}", localVarApiClient.escapeString(amount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTopUpCardNumberAmountPostValidateBeforeCall(String cardNumber, Double amount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardNumber' is set
        if (cardNumber == null) {
            throw new ApiException("Missing the required parameter 'cardNumber' when calling bankTopUpCardNumberAmountPost(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling bankTopUpCardNumberAmountPost(Async)");
        }

        return bankTopUpCardNumberAmountPostCall(cardNumber, amount, _callback);

    }

    /**
     * Top up account balance
     * Tops up the balance of the specified bank account by card number
     * @param cardNumber  (required)
     * @param amount  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account topped up </td><td>  -  </td></tr>
     </table>
     */
    public void bankTopUpCardNumberAmountPost(String cardNumber, Double amount) throws ApiException {
        bankTopUpCardNumberAmountPostWithHttpInfo(cardNumber, amount);
    }

    /**
     * Top up account balance
     * Tops up the balance of the specified bank account by card number
     * @param cardNumber  (required)
     * @param amount  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account topped up </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bankTopUpCardNumberAmountPostWithHttpInfo(String cardNumber, Double amount) throws ApiException {
        okhttp3.Call localVarCall = bankTopUpCardNumberAmountPostValidateBeforeCall(cardNumber, amount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Top up account balance (asynchronously)
     * Tops up the balance of the specified bank account by card number
     * @param cardNumber  (required)
     * @param amount  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bank account topped up </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankTopUpCardNumberAmountPostAsync(String cardNumber, Double amount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTopUpCardNumberAmountPostValidateBeforeCall(cardNumber, amount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankValidateCardNumberCvvPost
     * @param cardNumber  (required)
     * @param cvv  (required)
     * @param body Expiration date of the card (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card data validated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankValidateCardNumberCvvPostCall(String cardNumber, String cvv, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/bank/validate/{cardNumber}/{cvv}"
            .replace("{" + "cardNumber" + "}", localVarApiClient.escapeString(cardNumber.toString()))
            .replace("{" + "cvv" + "}", localVarApiClient.escapeString(cvv.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankValidateCardNumberCvvPostValidateBeforeCall(String cardNumber, String cvv, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardNumber' is set
        if (cardNumber == null) {
            throw new ApiException("Missing the required parameter 'cardNumber' when calling bankValidateCardNumberCvvPost(Async)");
        }

        // verify the required parameter 'cvv' is set
        if (cvv == null) {
            throw new ApiException("Missing the required parameter 'cvv' when calling bankValidateCardNumberCvvPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bankValidateCardNumberCvvPost(Async)");
        }

        return bankValidateCardNumberCvvPostCall(cardNumber, cvv, body, _callback);

    }

    /**
     * Method to validate card data
     * Validates the card data provided by the user from the client
     * @param cardNumber  (required)
     * @param cvv  (required)
     * @param body Expiration date of the card (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card data validated </td><td>  -  </td></tr>
     </table>
     */
    public void bankValidateCardNumberCvvPost(String cardNumber, String cvv, String body) throws ApiException {
        bankValidateCardNumberCvvPostWithHttpInfo(cardNumber, cvv, body);
    }

    /**
     * Method to validate card data
     * Validates the card data provided by the user from the client
     * @param cardNumber  (required)
     * @param cvv  (required)
     * @param body Expiration date of the card (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card data validated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bankValidateCardNumberCvvPostWithHttpInfo(String cardNumber, String cvv, String body) throws ApiException {
        okhttp3.Call localVarCall = bankValidateCardNumberCvvPostValidateBeforeCall(cardNumber, cvv, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Method to validate card data (asynchronously)
     * Validates the card data provided by the user from the client
     * @param cardNumber  (required)
     * @param cvv  (required)
     * @param body Expiration date of the card (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card data validated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankValidateCardNumberCvvPostAsync(String cardNumber, String cvv, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankValidateCardNumberCvvPostValidateBeforeCall(cardNumber, cvv, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartAddCartIdProductIdPost
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product added </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartAddCartIdProductIdPostCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart/add/{cartId}/{productId}"
            .replace("{" + "cartId" + "}", localVarApiClient.escapeString(cartId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartAddCartIdProductIdPostValidateBeforeCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling cartAddCartIdProductIdPost(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling cartAddCartIdProductIdPost(Async)");
        }

        return cartAddCartIdProductIdPostCall(cartId, productId, _callback);

    }

    /**
     * Add product to cart
     * Adds product to cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product added </td><td>  -  </td></tr>
     </table>
     */
    public void cartAddCartIdProductIdPost(String cartId, String productId) throws ApiException {
        cartAddCartIdProductIdPostWithHttpInfo(cartId, productId);
    }

    /**
     * Add product to cart
     * Adds product to cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product added </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cartAddCartIdProductIdPostWithHttpInfo(String cartId, String productId) throws ApiException {
        okhttp3.Call localVarCall = cartAddCartIdProductIdPostValidateBeforeCall(cartId, productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add product to cart (asynchronously)
     * Adds product to cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product added </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartAddCartIdProductIdPostAsync(String cartId, String productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartAddCartIdProductIdPostValidateBeforeCall(cartId, productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartDecrementCartIdProductIdPatch
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartDecrementCartIdProductIdPatchCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart/decrement/{cartId}/{productId}"
            .replace("{" + "cartId" + "}", localVarApiClient.escapeString(cartId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartDecrementCartIdProductIdPatchValidateBeforeCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling cartDecrementCartIdProductIdPatch(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling cartDecrementCartIdProductIdPatch(Async)");
        }

        return cartDecrementCartIdProductIdPatchCall(cartId, productId, _callback);

    }

    /**
     * Decrements product in cart
     * Decrements product in cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public void cartDecrementCartIdProductIdPatch(String cartId, String productId) throws ApiException {
        cartDecrementCartIdProductIdPatchWithHttpInfo(cartId, productId);
    }

    /**
     * Decrements product in cart
     * Decrements product in cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cartDecrementCartIdProductIdPatchWithHttpInfo(String cartId, String productId) throws ApiException {
        okhttp3.Call localVarCall = cartDecrementCartIdProductIdPatchValidateBeforeCall(cartId, productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Decrements product in cart (asynchronously)
     * Decrements product in cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartDecrementCartIdProductIdPatchAsync(String cartId, String productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartDecrementCartIdProductIdPatchValidateBeforeCall(cartId, productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartDeleteCartIdProductIdDelete
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartDeleteCartIdProductIdDeleteCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart/delete/{cartId}/{productId}"
            .replace("{" + "cartId" + "}", localVarApiClient.escapeString(cartId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartDeleteCartIdProductIdDeleteValidateBeforeCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling cartDeleteCartIdProductIdDelete(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling cartDeleteCartIdProductIdDelete(Async)");
        }

        return cartDeleteCartIdProductIdDeleteCall(cartId, productId, _callback);

    }

    /**
     * Delete product from cart
     * Deletes product from cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart deleted </td><td>  -  </td></tr>
     </table>
     */
    public void cartDeleteCartIdProductIdDelete(String cartId, String productId) throws ApiException {
        cartDeleteCartIdProductIdDeleteWithHttpInfo(cartId, productId);
    }

    /**
     * Delete product from cart
     * Deletes product from cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cartDeleteCartIdProductIdDeleteWithHttpInfo(String cartId, String productId) throws ApiException {
        okhttp3.Call localVarCall = cartDeleteCartIdProductIdDeleteValidateBeforeCall(cartId, productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete product from cart (asynchronously)
     * Deletes product from cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartDeleteCartIdProductIdDeleteAsync(String cartId, String productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartDeleteCartIdProductIdDeleteValidateBeforeCall(cartId, productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartIncrementCartIdProductIdPatch
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartIncrementCartIdProductIdPatchCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart/increment/{cartId}/{productId}"
            .replace("{" + "cartId" + "}", localVarApiClient.escapeString(cartId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartIncrementCartIdProductIdPatchValidateBeforeCall(String cartId, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling cartIncrementCartIdProductIdPatch(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling cartIncrementCartIdProductIdPatch(Async)");
        }

        return cartIncrementCartIdProductIdPatchCall(cartId, productId, _callback);

    }

    /**
     * Increments product in cart
     * Increments product in cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public void cartIncrementCartIdProductIdPatch(String cartId, String productId) throws ApiException {
        cartIncrementCartIdProductIdPatchWithHttpInfo(cartId, productId);
    }

    /**
     * Increments product in cart
     * Increments product in cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cartIncrementCartIdProductIdPatchWithHttpInfo(String cartId, String productId) throws ApiException {
        okhttp3.Call localVarCall = cartIncrementCartIdProductIdPatchValidateBeforeCall(cartId, productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Increments product in cart (asynchronously)
     * Increments product in cart by id
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product incremented </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartIncrementCartIdProductIdPatchAsync(String cartId, String productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartIncrementCartIdProductIdPatchValidateBeforeCall(cartId, productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetCategoryNameProductsGet
     * @param categoryName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCategoryNameProductsGetCall(String categoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/get/{categoryName}/products"
            .replace("{" + "categoryName" + "}", localVarApiClient.escapeString(categoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetCategoryNameProductsGetValidateBeforeCall(String categoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryName' is set
        if (categoryName == null) {
            throw new ApiException("Missing the required parameter 'categoryName' when calling catalogGetCategoryNameProductsGet(Async)");
        }

        return catalogGetCategoryNameProductsGetCall(categoryName, _callback);

    }

    /**
     * Get products in category
     * Returns all products in the specified category
     * @param categoryName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
     </table>
     */
    public void catalogGetCategoryNameProductsGet(String categoryName) throws ApiException {
        catalogGetCategoryNameProductsGetWithHttpInfo(categoryName);
    }

    /**
     * Get products in category
     * Returns all products in the specified category
     * @param categoryName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogGetCategoryNameProductsGetWithHttpInfo(String categoryName) throws ApiException {
        okhttp3.Call localVarCall = catalogGetCategoryNameProductsGetValidateBeforeCall(categoryName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get products in category (asynchronously)
     * Returns all products in the specified category
     * @param categoryName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCategoryNameProductsGetAsync(String categoryName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetCategoryNameProductsGetValidateBeforeCall(categoryName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryCreateCategoryNamePost
     * @param categoryName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryCreateCategoryNamePostCall(String categoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category/create/{categoryName}"
            .replace("{" + "categoryName" + "}", localVarApiClient.escapeString(categoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryCreateCategoryNamePostValidateBeforeCall(String categoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryName' is set
        if (categoryName == null) {
            throw new ApiException("Missing the required parameter 'categoryName' when calling categoryCreateCategoryNamePost(Async)");
        }

        return categoryCreateCategoryNamePostCall(categoryName, _callback);

    }

    /**
     * Create a new category
     * Creates a new category if it does not already exist
     * @param categoryName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category created </td><td>  -  </td></tr>
     </table>
     */
    public void categoryCreateCategoryNamePost(String categoryName) throws ApiException {
        categoryCreateCategoryNamePostWithHttpInfo(categoryName);
    }

    /**
     * Create a new category
     * Creates a new category if it does not already exist
     * @param categoryName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoryCreateCategoryNamePostWithHttpInfo(String categoryName) throws ApiException {
        okhttp3.Call localVarCall = categoryCreateCategoryNamePostValidateBeforeCall(categoryName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new category (asynchronously)
     * Creates a new category if it does not already exist
     * @param categoryName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryCreateCategoryNamePostAsync(String categoryName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryCreateCategoryNamePostValidateBeforeCall(categoryName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryCreateParentCategoryNameChildCategoryNamePost
     * @param parentCategoryName  (required)
     * @param childCategoryName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child category created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryCreateParentCategoryNameChildCategoryNamePostCall(String parentCategoryName, String childCategoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category/create/{parentCategoryName}/{childCategoryName}"
            .replace("{" + "parentCategoryName" + "}", localVarApiClient.escapeString(parentCategoryName.toString()))
            .replace("{" + "childCategoryName" + "}", localVarApiClient.escapeString(childCategoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryCreateParentCategoryNameChildCategoryNamePostValidateBeforeCall(String parentCategoryName, String childCategoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parentCategoryName' is set
        if (parentCategoryName == null) {
            throw new ApiException("Missing the required parameter 'parentCategoryName' when calling categoryCreateParentCategoryNameChildCategoryNamePost(Async)");
        }

        // verify the required parameter 'childCategoryName' is set
        if (childCategoryName == null) {
            throw new ApiException("Missing the required parameter 'childCategoryName' when calling categoryCreateParentCategoryNameChildCategoryNamePost(Async)");
        }

        return categoryCreateParentCategoryNameChildCategoryNamePostCall(parentCategoryName, childCategoryName, _callback);

    }

    /**
     * Create a new child category
     * Creates a new child category under the specified parent category
     * @param parentCategoryName  (required)
     * @param childCategoryName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child category created </td><td>  -  </td></tr>
     </table>
     */
    public void categoryCreateParentCategoryNameChildCategoryNamePost(String parentCategoryName, String childCategoryName) throws ApiException {
        categoryCreateParentCategoryNameChildCategoryNamePostWithHttpInfo(parentCategoryName, childCategoryName);
    }

    /**
     * Create a new child category
     * Creates a new child category under the specified parent category
     * @param parentCategoryName  (required)
     * @param childCategoryName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child category created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoryCreateParentCategoryNameChildCategoryNamePostWithHttpInfo(String parentCategoryName, String childCategoryName) throws ApiException {
        okhttp3.Call localVarCall = categoryCreateParentCategoryNameChildCategoryNamePostValidateBeforeCall(parentCategoryName, childCategoryName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new child category (asynchronously)
     * Creates a new child category under the specified parent category
     * @param parentCategoryName  (required)
     * @param childCategoryName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child category created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryCreateParentCategoryNameChildCategoryNamePostAsync(String parentCategoryName, String childCategoryName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryCreateParentCategoryNameChildCategoryNamePostValidateBeforeCall(parentCategoryName, childCategoryName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryGetCategoryNameGet
     * @param categoryName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryGetCategoryNameGetCall(String categoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category/get/{categoryName}"
            .replace("{" + "categoryName" + "}", localVarApiClient.escapeString(categoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryGetCategoryNameGetValidateBeforeCall(String categoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryName' is set
        if (categoryName == null) {
            throw new ApiException("Missing the required parameter 'categoryName' when calling categoryGetCategoryNameGet(Async)");
        }

        return categoryGetCategoryNameGetCall(categoryName, _callback);

    }

    /**
     * Get all child categories of a category
     * Returns all child categories of the specified category
     * @param categoryName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child categories </td><td>  -  </td></tr>
     </table>
     */
    public void categoryGetCategoryNameGet(String categoryName) throws ApiException {
        categoryGetCategoryNameGetWithHttpInfo(categoryName);
    }

    /**
     * Get all child categories of a category
     * Returns all child categories of the specified category
     * @param categoryName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child categories </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoryGetCategoryNameGetWithHttpInfo(String categoryName) throws ApiException {
        okhttp3.Call localVarCall = categoryGetCategoryNameGetValidateBeforeCall(categoryName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all child categories of a category (asynchronously)
     * Returns all child categories of the specified category
     * @param categoryName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryGetCategoryNameGetAsync(String categoryName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryGetCategoryNameGetValidateBeforeCall(categoryName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryGetGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of catalogs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryGetGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryGetGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return categoryGetGetCall(_callback);

    }

    /**
     * Get all parents categories
     * Returns a list of all parents categories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of catalogs </td><td>  -  </td></tr>
     </table>
     */
    public void categoryGetGet() throws ApiException {
        categoryGetGetWithHttpInfo();
    }

    /**
     * Get all parents categories
     * Returns a list of all parents categories
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of catalogs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoryGetGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = categoryGetGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all parents categories (asynchronously)
     * Returns a list of all parents categories
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of catalogs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryGetGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryGetGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCart
     * @param cartId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartCall(String cartId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart/get/{cartId}"
            .replace("{" + "cartId" + "}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCartValidateBeforeCall(String cartId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling getCart(Async)");
        }

        return getCartCall(cartId, _callback);

    }

    /**
     * Get cart by id
     * 
     * @param cartId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart found </td><td>  -  </td></tr>
     </table>
     */
    public void getCart(String cartId) throws ApiException {
        getCartWithHttpInfo(cartId);
    }

    /**
     * Get cart by id
     * 
     * @param cartId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCartWithHttpInfo(String cartId) throws ApiException {
        okhttp3.Call localVarCall = getCartValidateBeforeCall(cartId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get cart by id (asynchronously)
     * 
     * @param cartId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cart found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartAsync(String cartId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCartValidateBeforeCall(cartId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderCreateCartIdPost
     * @param cartId  (required)
     * @param requestBody List of product UUIDs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderCreateCartIdPostCall(String cartId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/order/create/{cartId}"
            .replace("{" + "cartId" + "}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderCreateCartIdPostValidateBeforeCall(String cartId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling orderCreateCartIdPost(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling orderCreateCartIdPost(Async)");
        }

        return orderCreateCartIdPostCall(cartId, requestBody, _callback);

    }

    /**
     * Create order
     * Creates order by cart id with chosen products from cart
     * @param cartId  (required)
     * @param requestBody List of product UUIDs (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order created successfully </td><td>  -  </td></tr>
     </table>
     */
    public void orderCreateCartIdPost(String cartId, List<String> requestBody) throws ApiException {
        orderCreateCartIdPostWithHttpInfo(cartId, requestBody);
    }

    /**
     * Create order
     * Creates order by cart id with chosen products from cart
     * @param cartId  (required)
     * @param requestBody List of product UUIDs (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orderCreateCartIdPostWithHttpInfo(String cartId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = orderCreateCartIdPostValidateBeforeCall(cartId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create order (asynchronously)
     * Creates order by cart id with chosen products from cart
     * @param cartId  (required)
     * @param requestBody List of product UUIDs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderCreateCartIdPostAsync(String cartId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderCreateCartIdPostValidateBeforeCall(cartId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentAddUserIdPost
     * @param userId  (required)
     * @param paymentType  (required)
     * @param cardNumber  (required)
     * @param expirationDate  (required)
     * @param cvv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment method added successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentAddUserIdPostCall(String userId, String paymentType, String cardNumber, String expirationDate, String cvv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/add/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paymentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentType", paymentType));
        }

        if (cardNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardNumber", cardNumber));
        }

        if (expirationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expirationDate", expirationDate));
        }

        if (cvv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cvv", cvv));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentAddUserIdPostValidateBeforeCall(String userId, String paymentType, String cardNumber, String expirationDate, String cvv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling paymentAddUserIdPost(Async)");
        }

        // verify the required parameter 'paymentType' is set
        if (paymentType == null) {
            throw new ApiException("Missing the required parameter 'paymentType' when calling paymentAddUserIdPost(Async)");
        }

        // verify the required parameter 'cardNumber' is set
        if (cardNumber == null) {
            throw new ApiException("Missing the required parameter 'cardNumber' when calling paymentAddUserIdPost(Async)");
        }

        // verify the required parameter 'expirationDate' is set
        if (expirationDate == null) {
            throw new ApiException("Missing the required parameter 'expirationDate' when calling paymentAddUserIdPost(Async)");
        }

        // verify the required parameter 'cvv' is set
        if (cvv == null) {
            throw new ApiException("Missing the required parameter 'cvv' when calling paymentAddUserIdPost(Async)");
        }

        return paymentAddUserIdPostCall(userId, paymentType, cardNumber, expirationDate, cvv, _callback);

    }

    /**
     * Add a new payment method
     * Adds a payment method (e.g. card) for the specified user
     * @param userId  (required)
     * @param paymentType  (required)
     * @param cardNumber  (required)
     * @param expirationDate  (required)
     * @param cvv  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment method added successfully </td><td>  -  </td></tr>
     </table>
     */
    public void paymentAddUserIdPost(String userId, String paymentType, String cardNumber, String expirationDate, String cvv) throws ApiException {
        paymentAddUserIdPostWithHttpInfo(userId, paymentType, cardNumber, expirationDate, cvv);
    }

    /**
     * Add a new payment method
     * Adds a payment method (e.g. card) for the specified user
     * @param userId  (required)
     * @param paymentType  (required)
     * @param cardNumber  (required)
     * @param expirationDate  (required)
     * @param cvv  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment method added successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> paymentAddUserIdPostWithHttpInfo(String userId, String paymentType, String cardNumber, String expirationDate, String cvv) throws ApiException {
        okhttp3.Call localVarCall = paymentAddUserIdPostValidateBeforeCall(userId, paymentType, cardNumber, expirationDate, cvv, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new payment method (asynchronously)
     * Adds a payment method (e.g. card) for the specified user
     * @param userId  (required)
     * @param paymentType  (required)
     * @param cardNumber  (required)
     * @param expirationDate  (required)
     * @param cvv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment method added successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentAddUserIdPostAsync(String userId, String paymentType, String cardNumber, String expirationDate, String cvv, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentAddUserIdPostValidateBeforeCall(userId, paymentType, cardNumber, expirationDate, cvv, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentGetAllUserIdGet
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available user payment methods </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGetAllUserIdGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/get/all/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentGetAllUserIdGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling paymentGetAllUserIdGet(Async)");
        }

        return paymentGetAllUserIdGetCall(userId, _callback);

    }

    /**
     * Get all available user payment methods
     * Retrieves all payment methods for a specific user
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available user payment methods </td><td>  -  </td></tr>
     </table>
     */
    public void paymentGetAllUserIdGet(String userId) throws ApiException {
        paymentGetAllUserIdGetWithHttpInfo(userId);
    }

    /**
     * Get all available user payment methods
     * Retrieves all payment methods for a specific user
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available user payment methods </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> paymentGetAllUserIdGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = paymentGetAllUserIdGetValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all available user payment methods (asynchronously)
     * Retrieves all payment methods for a specific user
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All available user payment methods </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGetAllUserIdGetAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentGetAllUserIdGetValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCreatePost
     * @param productDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCreatePostCall(ProductDto productDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productDto;

        // create path and map variables
        String localVarPath = "/product/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCreatePostValidateBeforeCall(ProductDto productDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productDto' is set
        if (productDto == null) {
            throw new ApiException("Missing the required parameter 'productDto' when calling productCreatePost(Async)");
        }

        return productCreatePostCall(productDto, _callback);

    }

    /**
     * Create a new product
     * Creates a new product with the given details
     * @param productDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product created </td><td>  -  </td></tr>
     </table>
     */
    public void productCreatePost(ProductDto productDto) throws ApiException {
        productCreatePostWithHttpInfo(productDto);
    }

    /**
     * Create a new product
     * Creates a new product with the given details
     * @param productDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productCreatePostWithHttpInfo(ProductDto productDto) throws ApiException {
        okhttp3.Call localVarCall = productCreatePostValidateBeforeCall(productDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new product (asynchronously)
     * Creates a new product with the given details
     * @param productDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCreatePostAsync(ProductDto productDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCreatePostValidateBeforeCall(productDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productQuantityProductIdChangeQuantityPost
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productQuantityProductIdChangeQuantityPostCall(String productId, Integer quantity, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/product/quantity/{productId}/change/{quantity}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "quantity" + "}", localVarApiClient.escapeString(quantity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productQuantityProductIdChangeQuantityPostValidateBeforeCall(String productId, Integer quantity, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productQuantityProductIdChangeQuantityPost(Async)");
        }

        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling productQuantityProductIdChangeQuantityPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productQuantityProductIdChangeQuantityPost(Async)");
        }

        return productQuantityProductIdChangeQuantityPostCall(productId, quantity, body, _callback);

    }

    /**
     * Change product stock quantity
     * Changes the stock quantity of a product by id
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock updated </td><td>  -  </td></tr>
     </table>
     */
    public void productQuantityProductIdChangeQuantityPost(String productId, Integer quantity, String body) throws ApiException {
        productQuantityProductIdChangeQuantityPostWithHttpInfo(productId, quantity, body);
    }

    /**
     * Change product stock quantity
     * Changes the stock quantity of a product by id
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productQuantityProductIdChangeQuantityPostWithHttpInfo(String productId, Integer quantity, String body) throws ApiException {
        okhttp3.Call localVarCall = productQuantityProductIdChangeQuantityPostValidateBeforeCall(productId, quantity, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change product stock quantity (asynchronously)
     * Changes the stock quantity of a product by id
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productQuantityProductIdChangeQuantityPostAsync(String productId, Integer quantity, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productQuantityProductIdChangeQuantityPostValidateBeforeCall(productId, quantity, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productQuantityProductIdReduceQuantityPost
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock reduced </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productQuantityProductIdReduceQuantityPostCall(String productId, Integer quantity, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/product/quantity/{productId}/reduce/{quantity}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "quantity" + "}", localVarApiClient.escapeString(quantity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productQuantityProductIdReduceQuantityPostValidateBeforeCall(String productId, Integer quantity, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productQuantityProductIdReduceQuantityPost(Async)");
        }

        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling productQuantityProductIdReduceQuantityPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productQuantityProductIdReduceQuantityPost(Async)");
        }

        return productQuantityProductIdReduceQuantityPostCall(productId, quantity, body, _callback);

    }

    /**
     * Reduce product stock quantity
     * Reduces the stock quantity of a product by id
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock reduced </td><td>  -  </td></tr>
     </table>
     */
    public void productQuantityProductIdReduceQuantityPost(String productId, Integer quantity, String body) throws ApiException {
        productQuantityProductIdReduceQuantityPostWithHttpInfo(productId, quantity, body);
    }

    /**
     * Reduce product stock quantity
     * Reduces the stock quantity of a product by id
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock reduced </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productQuantityProductIdReduceQuantityPostWithHttpInfo(String productId, Integer quantity, String body) throws ApiException {
        okhttp3.Call localVarCall = productQuantityProductIdReduceQuantityPostValidateBeforeCall(productId, quantity, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reduce product stock quantity (asynchronously)
     * Reduces the stock quantity of a product by id
     * @param productId  (required)
     * @param quantity  (required)
     * @param body Name of the subcatalog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product stock reduced </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productQuantityProductIdReduceQuantityPostAsync(String productId, Integer quantity, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productQuantityProductIdReduceQuantityPostValidateBeforeCall(productId, quantity, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionProcessOrderIdPaymentMethodIdPost
     * @param orderId  (required)
     * @param paymentMethodId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionProcessOrderIdPaymentMethodIdPostCall(String orderId, String paymentMethodId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction/process/{orderId}/{paymentMethodId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "paymentMethodId" + "}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionProcessOrderIdPaymentMethodIdPostValidateBeforeCall(String orderId, String paymentMethodId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling transactionProcessOrderIdPaymentMethodIdPost(Async)");
        }

        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling transactionProcessOrderIdPaymentMethodIdPost(Async)");
        }

        return transactionProcessOrderIdPaymentMethodIdPostCall(orderId, paymentMethodId, _callback);

    }

    /**
     * Process a payment transaction
     * Processes a payment transaction using the provided details
     * @param orderId  (required)
     * @param paymentMethodId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public void transactionProcessOrderIdPaymentMethodIdPost(String orderId, String paymentMethodId) throws ApiException {
        transactionProcessOrderIdPaymentMethodIdPostWithHttpInfo(orderId, paymentMethodId);
    }

    /**
     * Process a payment transaction
     * Processes a payment transaction using the provided details
     * @param orderId  (required)
     * @param paymentMethodId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionProcessOrderIdPaymentMethodIdPostWithHttpInfo(String orderId, String paymentMethodId) throws ApiException {
        okhttp3.Call localVarCall = transactionProcessOrderIdPaymentMethodIdPostValidateBeforeCall(orderId, paymentMethodId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Process a payment transaction (asynchronously)
     * Processes a payment transaction using the provided details
     * @param orderId  (required)
     * @param paymentMethodId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction processed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionProcessOrderIdPaymentMethodIdPostAsync(String orderId, String paymentMethodId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionProcessOrderIdPaymentMethodIdPostValidateBeforeCall(orderId, paymentMethodId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCreatePost
     * @param userDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCreatePostCall(UserDto userDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userDto;

        // create path and map variables
        String localVarPath = "/user/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCreatePostValidateBeforeCall(UserDto userDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userDto' is set
        if (userDto == null) {
            throw new ApiException("Missing the required parameter 'userDto' when calling userCreatePost(Async)");
        }

        return userCreatePostCall(userDto, _callback);

    }

    /**
     * Create a new user
     * Creates a new user with the given details
     * @param userDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public void userCreatePost(UserDto userDto) throws ApiException {
        userCreatePostWithHttpInfo(userDto);
    }

    /**
     * Create a new user
     * Creates a new user with the given details
     * @param userDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCreatePostWithHttpInfo(UserDto userDto) throws ApiException {
        okhttp3.Call localVarCall = userCreatePostValidateBeforeCall(userDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new user (asynchronously)
     * Creates a new user with the given details
     * @param userDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCreatePostAsync(UserDto userDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCreatePostValidateBeforeCall(userDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
